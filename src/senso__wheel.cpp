/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.2.0 Tue Mar 26 09:32:43 2024.
 */

#include <string.h>

#include "senso__wheel.h"

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_left_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value << shift) & mask);
}

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint8_t pack_right_shift_u32(
    uint32_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value >> shift) & mask);
}

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) << shift);
}

static inline uint32_t unpack_left_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) << shift);
}

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint8_t)((uint8_t)(value & mask) >> shift);
}

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint16_t)((uint16_t)(value & mask) >> shift);
}

static inline uint32_t unpack_right_shift_u32(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
    return (uint32_t)((uint32_t)(value & mask) >> shift);
}

int senso__wheel_control_module_control_pack(
    uint8_t *dst_p,
    const struct senso__wheel_control_module_control_t *src_p,
    size_t size)
{
    uint16_t position_offset;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->control_word, 0u, 0x0fu);
    dst_p[0] |= pack_left_shift_u8(src_p->mode_of_operation, 4u, 0xf0u);
    dst_p[1] |= pack_left_shift_u8(src_p->auxiliary_functions, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->end_stop_position, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->end_stop_position, 8u, 0xffu);
    position_offset = (uint16_t)src_p->position_offset;
    dst_p[4] |= pack_left_shift_u16(position_offset, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(position_offset, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u8(src_p->torque_limitation, 0u, 0xffu);
    dst_p[7] |= pack_left_shift_u8(src_p->peak_torque_limitation, 0u, 0xffu);

    return (8);
}

int senso__wheel_control_module_control_unpack(
    struct senso__wheel_control_module_control_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t position_offset;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->control_word = unpack_right_shift_u8(src_p[0], 0u, 0x0fu);
    dst_p->mode_of_operation = unpack_right_shift_u8(src_p[0], 4u, 0xf0u);
    dst_p->auxiliary_functions = unpack_right_shift_u8(src_p[1], 0u, 0xffu);
    dst_p->end_stop_position = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->end_stop_position |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    position_offset = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    position_offset |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->position_offset = (int16_t)position_offset;
    dst_p->torque_limitation = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
    dst_p->peak_torque_limitation = unpack_right_shift_u8(src_p[7], 0u, 0xffu);

    return (0);
}

uint8_t senso__wheel_control_module_control_control_word_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_control_module_control_control_word_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_control_word_is_in_range(uint8_t value)
{
    return (value <= 15u);
}

uint8_t senso__wheel_control_module_control_mode_of_operation_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_control_module_control_mode_of_operation_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_mode_of_operation_is_in_range(uint8_t value)
{
    return ((value >= 1u) && (value <= 8u));
}

uint8_t senso__wheel_control_module_control_auxiliary_functions_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_control_module_control_auxiliary_functions_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_auxiliary_functions_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_control_module_control_end_stop_position_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_control_module_control_end_stop_position_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_end_stop_position_is_in_range(uint16_t value)
{
    return (value <= 1440u);
}

int16_t senso__wheel_control_module_control_position_offset_encode(double value)
{
    return (int16_t)(value);
}

double senso__wheel_control_module_control_position_offset_decode(int16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_position_offset_is_in_range(int16_t value)
{
    return ((value >= -359) && (value <= 359));
}

uint8_t senso__wheel_control_module_control_torque_limitation_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_control_module_control_torque_limitation_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_torque_limitation_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t senso__wheel_control_module_control_peak_torque_limitation_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_control_module_control_peak_torque_limitation_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_control_peak_torque_limitation_is_in_range(uint8_t value)
{
    return (value <= 100u);
}

int senso__wheel_normal_mode_desired_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_normal_mode_desired_values_t *src_p,
    size_t size)
{
    uint16_t desired_torque;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    desired_torque = (uint16_t)src_p->desired_torque;
    dst_p[0] |= pack_left_shift_u16(desired_torque, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(desired_torque, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->friction, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->friction, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(src_p->damping, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->damping, 8u, 0xffu);
    dst_p[6] |= pack_left_shift_u16(src_p->spring_stiffness, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(src_p->spring_stiffness, 8u, 0xffu);

    return (8);
}

int senso__wheel_normal_mode_desired_values_unpack(
    struct senso__wheel_normal_mode_desired_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t desired_torque;

    if (size < 8u) {
        return (-EINVAL);
    }

    desired_torque = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    desired_torque |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->desired_torque = (int16_t)desired_torque;
    dst_p->friction = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->friction |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->damping = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->damping |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->spring_stiffness = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    dst_p->spring_stiffness |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);

    return (0);
}

int16_t senso__wheel_normal_mode_desired_values_desired_torque_encode(double value)
{
    return (int16_t)(value / 0.001);
}

double senso__wheel_normal_mode_desired_values_desired_torque_decode(int16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_normal_mode_desired_values_desired_torque_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_normal_mode_desired_values_friction_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_normal_mode_desired_values_friction_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_normal_mode_desired_values_friction_is_in_range(uint16_t value)
{
    return (value <= 5000u);
}

uint16_t senso__wheel_normal_mode_desired_values_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_normal_mode_desired_values_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_normal_mode_desired_values_damping_is_in_range(uint16_t value)
{
    return (value <= 500u);
}

uint16_t senso__wheel_normal_mode_desired_values_spring_stiffness_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_normal_mode_desired_values_spring_stiffness_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_normal_mode_desired_values_spring_stiffness_is_in_range(uint16_t value)
{
    return (value <= 2500u);
}

int senso__wheel_basic_mode_desired_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_basic_mode_desired_values_t *src_p,
    size_t size)
{
    uint16_t desired_torque;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    desired_torque = (uint16_t)src_p->desired_torque;
    dst_p[0] |= pack_left_shift_u16(desired_torque, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(desired_torque, 8u, 0xffu);

    return (2);
}

int senso__wheel_basic_mode_desired_values_unpack(
    struct senso__wheel_basic_mode_desired_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t desired_torque;

    if (size < 2u) {
        return (-EINVAL);
    }

    desired_torque = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    desired_torque |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->desired_torque = (int16_t)desired_torque;

    return (0);
}

int16_t senso__wheel_basic_mode_desired_values_desired_torque_encode(double value)
{
    return (int16_t)(value / 0.001);
}

double senso__wheel_basic_mode_desired_values_desired_torque_decode(int16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_basic_mode_desired_values_desired_torque_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_digital_output_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_digital_output_values_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    dst_p[0] |= pack_left_shift_u8(src_p->digital_output, 0u, 0x07u);

    return (2);
}

int senso__wheel_digital_output_values_unpack(
    struct senso__wheel_digital_output_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 2u) {
        return (-EINVAL);
    }

    dst_p->digital_output = unpack_right_shift_u8(src_p[0], 0u, 0x07u);

    return (0);
}

uint8_t senso__wheel_digital_output_values_digital_output_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_digital_output_values_digital_output_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_digital_output_values_digital_output_is_in_range(uint8_t value)
{
    return (value <= 7u);
}

int senso__wheel_absolute_position_pack(
    uint8_t *dst_p,
    const struct senso__wheel_absolute_position_t *src_p,
    size_t size)
{
    uint16_t absolute_position;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    absolute_position = (uint16_t)src_p->absolute_position;
    dst_p[0] |= pack_left_shift_u16(absolute_position, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(absolute_position, 8u, 0xffu);

    return (2);
}

int senso__wheel_absolute_position_unpack(
    struct senso__wheel_absolute_position_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t absolute_position;

    if (size < 2u) {
        return (-EINVAL);
    }

    absolute_position = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    absolute_position |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->absolute_position = (int16_t)absolute_position;

    return (0);
}

int16_t senso__wheel_absolute_position_absolute_position_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double senso__wheel_absolute_position_absolute_position_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_absolute_position_absolute_position_is_in_range(int16_t value)
{
    return ((value >= -14400) && (value <= 14400));
}

int senso__wheel_system_parameters_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_system_parameters_request_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->system_parameters_request_mux, 0u, 0xffu);

    switch (src_p->system_parameters_request_mux) {

    case 1:
        break;

    case 2:
        break;

    default:
        break;
    }

    return (1);
}

int senso__wheel_system_parameters_request_unpack(
    struct senso__wheel_system_parameters_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    dst_p->system_parameters_request_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->system_parameters_request_mux) {

    case 1:
        break;

    case 2:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_system_parameters_request_system_parameters_request_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_system_parameters_request_system_parameters_request_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_system_parameters_request_system_parameters_request_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_read_only_values_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_read_only_values_request_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->read_only_values_request_mux, 0u, 0xffu);

    switch (src_p->read_only_values_request_mux) {

    case 1:
        break;

    case 2:
        break;

    case 3:
        break;

    default:
        break;
    }

    return (1);
}

int senso__wheel_read_only_values_request_unpack(
    struct senso__wheel_read_only_values_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    dst_p->read_only_values_request_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->read_only_values_request_mux) {

    case 1:
        break;

    case 2:
        break;

    case 3:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_read_only_values_request_read_only_values_request_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_read_only_values_request_read_only_values_request_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_request_read_only_values_request_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_version_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_version_request_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->version_request_mux, 0u, 0xffu);

    switch (src_p->version_request_mux) {

    case 1:
        break;

    case 2:
        break;

    default:
        break;
    }

    return (1);
}

int senso__wheel_version_request_unpack(
    struct senso__wheel_version_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    dst_p->version_request_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->version_request_mux) {

    case 1:
        break;

    case 2:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_version_request_version_request_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_request_version_request_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_request_version_request_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_effect_parameters_write_pack(
    uint8_t *dst_p,
    const struct senso__wheel_effect_parameters_write_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->effect_parameters_write_mux, 0u, 0xffu);

    switch (src_p->effect_parameters_write_mux) {

    case 1:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_end_stop_stiffness, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_end_stop_stiffness, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_des_end_stop_damping, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_des_end_stop_damping, 8u, 0xffu);
        break;

    case 2:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_referencing_damping, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_referencing_damping, 8u, 0xffu);
        break;

    case 3:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_friction_gain, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_friction_gain, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_des_friction_edge, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_des_friction_edge, 8u, 0xffu);
        break;

    case 4:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_end_stop_vibration_dist, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_end_stop_vibration_dist, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_des_end_stop_vibration_period, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_des_end_stop_vibration_period, 8u, 0xffu);
        dst_p[6] |= pack_left_shift_u16(src_p->eff_para_des_end_stop_vibration_gap, 0u, 0xffu);
        dst_p[7] |= pack_right_shift_u16(src_p->eff_para_des_end_stop_vibration_gap, 8u, 0xffu);
        break;

    case 5:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_friction2_damping, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_friction2_damping, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_des_friction2_factor, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_des_friction2_factor, 8u, 0xffu);
        break;

    case 6:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_des_damping_half_damping_vel, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_des_damping_half_damping_vel, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_des_damping_vel_filter_const, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_des_damping_vel_filter_const, 8u, 0xffu);
        break;

    case 7:
        dst_p[2] |= pack_left_shift_u16(src_p->torque_scaling, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->torque_scaling, 8u, 0xffu);
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_effect_parameters_write_unpack(
    struct senso__wheel_effect_parameters_write_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->effect_parameters_write_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->effect_parameters_write_mux) {

    case 1:
        dst_p->eff_para_des_end_stop_stiffness = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_end_stop_stiffness |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_des_end_stop_damping = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_des_end_stop_damping |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 2:
        dst_p->eff_para_des_referencing_damping = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_referencing_damping |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        break;

    case 3:
        dst_p->eff_para_des_friction_gain = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_friction_gain |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_des_friction_edge = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_des_friction_edge |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 4:
        dst_p->eff_para_des_end_stop_vibration_dist = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_end_stop_vibration_dist |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_des_end_stop_vibration_period = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_des_end_stop_vibration_period |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        dst_p->eff_para_des_end_stop_vibration_gap = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
        dst_p->eff_para_des_end_stop_vibration_gap |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
        break;

    case 5:
        dst_p->eff_para_des_friction2_damping = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_friction2_damping |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_des_friction2_factor = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_des_friction2_factor |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 6:
        dst_p->eff_para_des_damping_half_damping_vel = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_des_damping_half_damping_vel |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_des_damping_vel_filter_const = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_des_damping_vel_filter_const |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 7:
        dst_p->torque_scaling = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->torque_scaling |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_effect_parameters_write_effect_parameters_write_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_effect_parameters_write_effect_parameters_write_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_effect_parameters_write_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction_gain_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_friction_gain_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_friction_gain_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_is_in_range(uint16_t value)
{
    return (value <= 255u);
}

uint16_t senso__wheel_effect_parameters_write_torque_scaling_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double senso__wheel_effect_parameters_write_torque_scaling_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_effect_parameters_write_torque_scaling_is_in_range(uint16_t value)
{
    return (value <= 1u);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction_edge_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_friction_edge_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_friction_edge_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_user_parameters_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_user_parameters_request_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 1);

    dst_p[0] |= pack_left_shift_u8(src_p->user_parameters_request_mux, 0u, 0xffu);

    switch (src_p->user_parameters_request_mux) {

    case 1:
        break;

    default:
        break;
    }

    return (1);
}

int senso__wheel_user_parameters_request_unpack(
    struct senso__wheel_user_parameters_request_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 1u) {
        return (-EINVAL);
    }

    dst_p->user_parameters_request_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->user_parameters_request_mux) {

    case 1:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_user_parameters_request_user_parameters_request_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_user_parameters_request_user_parameters_request_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_user_parameters_request_user_parameters_request_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_control_module_status_pack(
    uint8_t *dst_p,
    const struct senso__wheel_control_module_status_t *src_p,
    size_t size)
{
    uint16_t encoder_index_position;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u16(src_p->status, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(src_p->status, 8u, 0xffu);
    dst_p[2] |= pack_left_shift_u16(src_p->error, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->error, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(src_p->end_stop_position, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->end_stop_position, 8u, 0xffu);
    encoder_index_position = (uint16_t)src_p->encoder_index_position;
    dst_p[6] |= pack_left_shift_u16(encoder_index_position, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(encoder_index_position, 8u, 0xffu);

    return (8);
}

int senso__wheel_control_module_status_unpack(
    struct senso__wheel_control_module_status_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t encoder_index_position;

    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->status = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    dst_p->status |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->error = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->error |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->end_stop_position = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->end_stop_position |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    encoder_index_position = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    encoder_index_position |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
    dst_p->encoder_index_position = (int16_t)encoder_index_position;

    return (0);
}

uint16_t senso__wheel_control_module_status_status_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_control_module_status_status_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_status_status_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_control_module_status_error_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_control_module_status_error_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_status_error_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_control_module_status_end_stop_position_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_control_module_status_end_stop_position_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_status_end_stop_position_is_in_range(uint16_t value)
{
    return (value <= 1440u);
}

int16_t senso__wheel_control_module_status_encoder_index_position_encode(double value)
{
    return (int16_t)(value);
}

double senso__wheel_control_module_status_encoder_index_position_decode(int16_t value)
{
    return ((double)value);
}

bool senso__wheel_control_module_status_encoder_index_position_is_in_range(int16_t value)
{
    return ((value >= -359) && (value <= 359));
}

int senso__wheel_normal_mode_actual_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_normal_mode_actual_values_t *src_p,
    size_t size)
{
    uint16_t nm_actual_torque;
    uint16_t nm_actual_velocity;
    uint32_t nm_actual_position;

    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    nm_actual_position = (uint32_t)src_p->nm_actual_position;
    dst_p[0] |= pack_left_shift_u32(nm_actual_position, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u32(nm_actual_position, 8u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(nm_actual_position, 16u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(nm_actual_position, 24u, 0xffu);
    nm_actual_velocity = (uint16_t)src_p->nm_actual_velocity;
    dst_p[4] |= pack_left_shift_u16(nm_actual_velocity, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(nm_actual_velocity, 8u, 0xffu);
    nm_actual_torque = (uint16_t)src_p->nm_actual_torque;
    dst_p[6] |= pack_left_shift_u16(nm_actual_torque, 0u, 0xffu);
    dst_p[7] |= pack_right_shift_u16(nm_actual_torque, 8u, 0xffu);

    return (8);
}

int senso__wheel_normal_mode_actual_values_unpack(
    struct senso__wheel_normal_mode_actual_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t nm_actual_torque;
    uint16_t nm_actual_velocity;
    uint32_t nm_actual_position;

    if (size < 8u) {
        return (-EINVAL);
    }

    nm_actual_position = unpack_right_shift_u32(src_p[0], 0u, 0xffu);
    nm_actual_position |= unpack_left_shift_u32(src_p[1], 8u, 0xffu);
    nm_actual_position |= unpack_left_shift_u32(src_p[2], 16u, 0xffu);
    nm_actual_position |= unpack_left_shift_u32(src_p[3], 24u, 0xffu);
    dst_p->nm_actual_position = (int32_t)nm_actual_position;
    nm_actual_velocity = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    nm_actual_velocity |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
    dst_p->nm_actual_velocity = (int16_t)nm_actual_velocity;
    nm_actual_torque = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
    nm_actual_torque |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
    dst_p->nm_actual_torque = (int16_t)nm_actual_torque;

    return (0);
}

int32_t senso__wheel_normal_mode_actual_values_nm_actual_position_encode(double value)
{
    return (int32_t)(value);
}

double senso__wheel_normal_mode_actual_values_nm_actual_position_decode(int32_t value)
{
    return ((double)value);
}

bool senso__wheel_normal_mode_actual_values_nm_actual_position_is_in_range(int32_t value)
{
    (void)value;

    return (true);
}

int16_t senso__wheel_normal_mode_actual_values_nm_actual_velocity_encode(double value)
{
    return (int16_t)(value);
}

double senso__wheel_normal_mode_actual_values_nm_actual_velocity_decode(int16_t value)
{
    return ((double)value);
}

bool senso__wheel_normal_mode_actual_values_nm_actual_velocity_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int16_t senso__wheel_normal_mode_actual_values_nm_actual_torque_encode(double value)
{
    return (int16_t)(value / 0.001);
}

double senso__wheel_normal_mode_actual_values_nm_actual_torque_decode(int16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_normal_mode_actual_values_nm_actual_torque_is_in_range(int16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_basic_mode_actual_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_basic_mode_actual_values_t *src_p,
    size_t size)
{
    uint32_t bm_actual_position;

    if (size < 4u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 4);

    bm_actual_position = (uint32_t)src_p->bm_actual_position;
    dst_p[0] |= pack_left_shift_u32(bm_actual_position, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u32(bm_actual_position, 8u, 0xffu);
    dst_p[2] |= pack_right_shift_u32(bm_actual_position, 16u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(bm_actual_position, 24u, 0xffu);

    return (4);
}

int senso__wheel_basic_mode_actual_values_unpack(
    struct senso__wheel_basic_mode_actual_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint32_t bm_actual_position;

    if (size < 4u) {
        return (-EINVAL);
    }

    bm_actual_position = unpack_right_shift_u32(src_p[0], 0u, 0xffu);
    bm_actual_position |= unpack_left_shift_u32(src_p[1], 8u, 0xffu);
    bm_actual_position |= unpack_left_shift_u32(src_p[2], 16u, 0xffu);
    bm_actual_position |= unpack_left_shift_u32(src_p[3], 24u, 0xffu);
    dst_p->bm_actual_position = (int32_t)bm_actual_position;

    return (0);
}

int32_t senso__wheel_basic_mode_actual_values_bm_actual_position_encode(double value)
{
    return (int32_t)(value);
}

double senso__wheel_basic_mode_actual_values_bm_actual_position_decode(int32_t value)
{
    return ((double)value);
}

bool senso__wheel_basic_mode_actual_values_bm_actual_position_is_in_range(int32_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_digital_analog_input_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_digital_analog_input_values_t *src_p,
    size_t size)
{
    if (size < 6u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 6);

    dst_p[0] |= pack_left_shift_u8(src_p->digital_input, 0u, 0x3fu);
    dst_p[2] |= pack_left_shift_u16(src_p->analog_input1, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u16(src_p->analog_input1, 8u, 0xffu);
    dst_p[4] |= pack_left_shift_u16(src_p->analog_input2, 0u, 0xffu);
    dst_p[5] |= pack_right_shift_u16(src_p->analog_input2, 8u, 0xffu);

    return (6);
}

int senso__wheel_digital_analog_input_values_unpack(
    struct senso__wheel_digital_analog_input_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 6u) {
        return (-EINVAL);
    }

    dst_p->digital_input = unpack_right_shift_u8(src_p[0], 0u, 0x3fu);
    dst_p->analog_input1 = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
    dst_p->analog_input1 |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
    dst_p->analog_input2 = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
    dst_p->analog_input2 |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);

    return (0);
}

uint8_t senso__wheel_digital_analog_input_values_digital_input_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_digital_analog_input_values_digital_input_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_digital_analog_input_values_digital_input_is_in_range(uint8_t value)
{
    return (value <= 63u);
}

uint16_t senso__wheel_digital_analog_input_values_analog_input1_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_digital_analog_input_values_analog_input1_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_digital_analog_input_values_analog_input1_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

uint16_t senso__wheel_digital_analog_input_values_analog_input2_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_digital_analog_input_values_analog_input2_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_digital_analog_input_values_analog_input2_is_in_range(uint16_t value)
{
    return (value <= 1023u);
}

int senso__wheel_absolute_position_response_pack(
    uint8_t *dst_p,
    const struct senso__wheel_absolute_position_response_t *src_p,
    size_t size)
{
    uint16_t absolute_position;

    if (size < 2u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 2);

    absolute_position = (uint16_t)src_p->absolute_position;
    dst_p[0] |= pack_left_shift_u16(absolute_position, 0u, 0xffu);
    dst_p[1] |= pack_right_shift_u16(absolute_position, 8u, 0xffu);

    return (2);
}

int senso__wheel_absolute_position_response_unpack(
    struct senso__wheel_absolute_position_response_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    uint16_t absolute_position;

    if (size < 2u) {
        return (-EINVAL);
    }

    absolute_position = unpack_right_shift_u16(src_p[0], 0u, 0xffu);
    absolute_position |= unpack_left_shift_u16(src_p[1], 8u, 0xffu);
    dst_p->absolute_position = (int16_t)absolute_position;

    return (0);
}

int16_t senso__wheel_absolute_position_response_absolute_position_encode(double value)
{
    return (int16_t)(value / 0.1);
}

double senso__wheel_absolute_position_response_absolute_position_decode(int16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_absolute_position_response_absolute_position_is_in_range(int16_t value)
{
    return ((value >= -14400) && (value <= 14400));
}

int senso__wheel_system_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_system_parameters_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->system_parameters_mux, 0u, 0xffu);

    switch (src_p->system_parameters_mux) {

    case 1:
        dst_p[2] |= pack_left_shift_u32(src_p->position_increments_per_revolution, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u32(src_p->position_increments_per_revolution, 8u, 0xffu);
        dst_p[4] |= pack_right_shift_u32(src_p->position_increments_per_revolution, 16u, 0xffu);
        dst_p[5] |= pack_right_shift_u32(src_p->position_increments_per_revolution, 24u, 0xffu);
        break;

    case 2:
        dst_p[2] |= pack_left_shift_u16(src_p->nominal_torque, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->nominal_torque, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->maximum_torque, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->maximum_torque, 8u, 0xffu);
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_system_parameters_unpack(
    struct senso__wheel_system_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->system_parameters_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->system_parameters_mux) {

    case 1:
        dst_p->position_increments_per_revolution = unpack_right_shift_u32(src_p[2], 0u, 0xffu);
        dst_p->position_increments_per_revolution |= unpack_left_shift_u32(src_p[3], 8u, 0xffu);
        dst_p->position_increments_per_revolution |= unpack_left_shift_u32(src_p[4], 16u, 0xffu);
        dst_p->position_increments_per_revolution |= unpack_left_shift_u32(src_p[5], 24u, 0xffu);
        break;

    case 2:
        dst_p->nominal_torque = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->nominal_torque |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->maximum_torque = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->maximum_torque |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_system_parameters_system_parameters_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_system_parameters_system_parameters_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_system_parameters_system_parameters_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint32_t senso__wheel_system_parameters_position_increments_per_revolution_encode(double value)
{
    return (uint32_t)(value);
}

double senso__wheel_system_parameters_position_increments_per_revolution_decode(uint32_t value)
{
    return ((double)value);
}

bool senso__wheel_system_parameters_position_increments_per_revolution_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_system_parameters_nominal_torque_encode(double value)
{
    return (uint16_t)(value / 0.001);
}

double senso__wheel_system_parameters_nominal_torque_decode(uint16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_system_parameters_nominal_torque_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_system_parameters_maximum_torque_encode(double value)
{
    return (uint16_t)(value / 0.001);
}

double senso__wheel_system_parameters_maximum_torque_decode(uint16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_system_parameters_maximum_torque_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_read_only_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_read_only_values_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->read_only_values_mux, 0u, 0xffu);

    switch (src_p->read_only_values_mux) {

    case 1:
        dst_p[2] |= pack_left_shift_u16(src_p->temperature_power_stage, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->temperature_power_stage, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->temperature_microprocessor, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->temperature_microprocessor, 8u, 0xffu);
        dst_p[6] |= pack_left_shift_u16(src_p->temperature_break_chopper, 0u, 0xffu);
        dst_p[7] |= pack_right_shift_u16(src_p->temperature_break_chopper, 8u, 0xffu);
        break;

    case 2:
        dst_p[2] |= pack_left_shift_u16(src_p->average_absolute_motor_torque, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->average_absolute_motor_torque, 8u, 0xffu);
        break;

    case 3:
        dst_p[2] |= pack_left_shift_u16(src_p->error, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->error, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->hardware_specific_error, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->hardware_specific_error, 8u, 0xffu);
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_read_only_values_unpack(
    struct senso__wheel_read_only_values_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->read_only_values_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->read_only_values_mux) {

    case 1:
        dst_p->temperature_power_stage = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->temperature_power_stage |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->temperature_microprocessor = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->temperature_microprocessor |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        dst_p->temperature_break_chopper = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
        dst_p->temperature_break_chopper |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
        break;

    case 2:
        dst_p->average_absolute_motor_torque = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->average_absolute_motor_torque |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        break;

    case 3:
        dst_p->error = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->error |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->hardware_specific_error = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->hardware_specific_error |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_read_only_values_read_only_values_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_read_only_values_read_only_values_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_read_only_values_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_temperature_power_stage_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_read_only_values_temperature_power_stage_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_temperature_power_stage_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_average_absolute_motor_torque_encode(double value)
{
    return (uint16_t)(value / 0.001);
}

double senso__wheel_read_only_values_average_absolute_motor_torque_decode(uint16_t value)
{
    return ((double)value * 0.001);
}

bool senso__wheel_read_only_values_average_absolute_motor_torque_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_error_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_read_only_values_error_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_error_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_temperature_microprocessor_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_read_only_values_temperature_microprocessor_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_temperature_microprocessor_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_hardware_specific_error_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_read_only_values_hardware_specific_error_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_hardware_specific_error_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_read_only_values_temperature_break_chopper_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_read_only_values_temperature_break_chopper_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_read_only_values_temperature_break_chopper_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_version_pack(
    uint8_t *dst_p,
    const struct senso__wheel_version_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->version_mux, 0u, 0xffu);

    switch (src_p->version_mux) {

    case 1:
        dst_p[2] |= pack_left_shift_u8(src_p->software_basic_version_minor, 0u, 0xffu);
        dst_p[3] |= pack_left_shift_u8(src_p->software_basic_version_major, 0u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->project_code, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->project_code, 8u, 0xffu);
        dst_p[6] |= pack_left_shift_u8(src_p->project_version_minor, 0u, 0xffu);
        dst_p[7] |= pack_left_shift_u8(src_p->project_version_major, 0u, 0xffu);
        break;

    case 2:
        dst_p[2] |= pack_left_shift_u16(src_p->product_code, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->product_code, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->hardware_option, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->hardware_option, 8u, 0xffu);
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_version_unpack(
    struct senso__wheel_version_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->version_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->version_mux) {

    case 1:
        dst_p->software_basic_version_minor = unpack_right_shift_u8(src_p[2], 0u, 0xffu);
        dst_p->software_basic_version_major = unpack_right_shift_u8(src_p[3], 0u, 0xffu);
        dst_p->project_code = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->project_code |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        dst_p->project_version_minor = unpack_right_shift_u8(src_p[6], 0u, 0xffu);
        dst_p->project_version_major = unpack_right_shift_u8(src_p[7], 0u, 0xffu);
        break;

    case 2:
        dst_p->product_code = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->product_code |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->hardware_option = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->hardware_option |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_version_version_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_version_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_version_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t senso__wheel_version_software_basic_version_minor_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_software_basic_version_minor_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_software_basic_version_minor_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_version_product_code_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_version_product_code_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_version_product_code_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t senso__wheel_version_software_basic_version_major_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_software_basic_version_major_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_software_basic_version_major_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_version_project_code_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_version_project_code_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_version_project_code_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_version_hardware_option_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_version_hardware_option_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_version_hardware_option_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint8_t senso__wheel_version_project_version_minor_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_project_version_minor_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_project_version_minor_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint8_t senso__wheel_version_project_version_major_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_version_project_version_major_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_version_project_version_major_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_effect_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_effect_parameters_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->effect_parameters_mux, 0u, 0xffu);

    switch (src_p->effect_parameters_mux) {

    case 1:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_end_stop_stiffness, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_end_stop_stiffness, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_end_stop_damping, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_end_stop_damping, 8u, 0xffu);
        break;

    case 2:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_referencing_damping, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_referencing_damping, 8u, 0xffu);
        break;

    case 3:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_friction_gain, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_friction_gain, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_friction_edge, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_friction_edge, 8u, 0xffu);
        break;

    case 4:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_end_stop_vibration_dist, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_end_stop_vibration_dist, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_end_stop_vibration_period, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_end_stop_vibration_period, 8u, 0xffu);
        dst_p[6] |= pack_left_shift_u16(src_p->eff_para_end_stop_vibration_gap, 0u, 0xffu);
        dst_p[7] |= pack_right_shift_u16(src_p->eff_para_end_stop_vibration_gap, 8u, 0xffu);
        break;

    case 5:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_friction2_damping, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_friction2_damping, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_friction2_factor, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_friction2_factor, 8u, 0xffu);
        break;

    case 6:
        dst_p[2] |= pack_left_shift_u16(src_p->eff_para_damping_half_damping_vel, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->eff_para_damping_half_damping_vel, 8u, 0xffu);
        dst_p[4] |= pack_left_shift_u16(src_p->eff_para_damping_vel_filter_const, 0u, 0xffu);
        dst_p[5] |= pack_right_shift_u16(src_p->eff_para_damping_vel_filter_const, 8u, 0xffu);
        break;

    case 7:
        dst_p[2] |= pack_left_shift_u16(src_p->torque_scaling, 0u, 0xffu);
        dst_p[3] |= pack_right_shift_u16(src_p->torque_scaling, 8u, 0xffu);
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_effect_parameters_unpack(
    struct senso__wheel_effect_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->effect_parameters_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);

    switch (dst_p->effect_parameters_mux) {

    case 1:
        dst_p->eff_para_end_stop_stiffness = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_end_stop_stiffness |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_end_stop_damping = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_end_stop_damping |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 2:
        dst_p->eff_para_referencing_damping = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_referencing_damping |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        break;

    case 3:
        dst_p->eff_para_friction_gain = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_friction_gain |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_friction_edge = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_friction_edge |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 4:
        dst_p->eff_para_end_stop_vibration_dist = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_end_stop_vibration_dist |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_end_stop_vibration_period = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_end_stop_vibration_period |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        dst_p->eff_para_end_stop_vibration_gap = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
        dst_p->eff_para_end_stop_vibration_gap |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
        break;

    case 5:
        dst_p->eff_para_friction2_damping = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_friction2_damping |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_friction2_factor = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_friction2_factor |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 6:
        dst_p->eff_para_damping_half_damping_vel = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->eff_para_damping_half_damping_vel |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        dst_p->eff_para_damping_vel_filter_const = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
        dst_p->eff_para_damping_vel_filter_const |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
        break;

    case 7:
        dst_p->torque_scaling = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
        dst_p->torque_scaling |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_effect_parameters_effect_parameters_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_effect_parameters_effect_parameters_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_effect_parameters_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_end_stop_stiffness_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_end_stop_stiffness_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_end_stop_stiffness_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_referencing_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_referencing_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_referencing_damping_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_friction_gain_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_friction_gain_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_friction_gain_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_friction2_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_friction2_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_friction2_damping_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_torque_scaling_encode(double value)
{
    return (uint16_t)(value / 0.1);
}

double senso__wheel_effect_parameters_torque_scaling_decode(uint16_t value)
{
    return ((double)value * 0.1);
}

bool senso__wheel_effect_parameters_torque_scaling_is_in_range(uint16_t value)
{
    return ((value >= 100u) && (value <= 1000u));
}

uint16_t senso__wheel_effect_parameters_eff_para_end_stop_damping_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_end_stop_damping_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_end_stop_damping_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_friction_edge_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_friction_edge_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_friction_edge_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_friction2_factor_encode(double value)
{
    return (uint16_t)(value / 0.01);
}

double senso__wheel_effect_parameters_eff_para_friction2_factor_decode(uint16_t value)
{
    return ((double)value * 0.01);
}

bool senso__wheel_effect_parameters_eff_para_friction2_factor_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_encode(double value)
{
    return (uint16_t)(value);
}

double senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_decode(uint16_t value)
{
    return ((double)value);
}

bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_is_in_range(uint16_t value)
{
    (void)value;

    return (true);
}

int senso__wheel_user_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_user_parameters_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    memset(&dst_p[0], 0, 8);

    dst_p[0] |= pack_left_shift_u8(src_p->user_parameters_mux, 0u, 0xffu);
    dst_p[2] |= pack_left_shift_u32(src_p->can_baud_rate, 0u, 0xffu);
    dst_p[3] |= pack_right_shift_u32(src_p->can_baud_rate, 8u, 0xffu);
    dst_p[4] |= pack_right_shift_u32(src_p->can_baud_rate, 16u, 0xffu);
    dst_p[5] |= pack_right_shift_u32(src_p->can_baud_rate, 24u, 0xffu);

    switch (src_p->user_parameters_mux) {

    case 1:
        break;

    default:
        break;
    }

    return (8);
}

int senso__wheel_user_parameters_unpack(
    struct senso__wheel_user_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
    if (size < 8u) {
        return (-EINVAL);
    }

    dst_p->user_parameters_mux = unpack_right_shift_u8(src_p[0], 0u, 0xffu);
    dst_p->can_baud_rate = unpack_right_shift_u32(src_p[2], 0u, 0xffu);
    dst_p->can_baud_rate |= unpack_left_shift_u32(src_p[3], 8u, 0xffu);
    dst_p->can_baud_rate |= unpack_left_shift_u32(src_p[4], 16u, 0xffu);
    dst_p->can_baud_rate |= unpack_left_shift_u32(src_p[5], 24u, 0xffu);

    switch (dst_p->user_parameters_mux) {

    case 1:
        break;

    default:
        break;
    }

    return (0);
}

uint8_t senso__wheel_user_parameters_user_parameters_mux_encode(double value)
{
    return (uint8_t)(value);
}

double senso__wheel_user_parameters_user_parameters_mux_decode(uint8_t value)
{
    return ((double)value);
}

bool senso__wheel_user_parameters_user_parameters_mux_is_in_range(uint8_t value)
{
    (void)value;

    return (true);
}

uint32_t senso__wheel_user_parameters_can_baud_rate_encode(double value)
{
    return (uint32_t)(value);
}

double senso__wheel_user_parameters_can_baud_rate_decode(uint32_t value)
{
    return ((double)value);
}

bool senso__wheel_user_parameters_can_baud_rate_is_in_range(uint32_t value)
{
    (void)value;

    return (true);
}
