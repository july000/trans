/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.2.0 Tue Mar 26 09:32:43 2024.
 */

#ifndef SENSO__WHEEL_H
#define SENSO__WHEEL_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_FRAME_ID (0x200u)
#define SENSO__WHEEL_NORMAL_MODE_DESIRED_VALUES_FRAME_ID (0x201u)
#define SENSO__WHEEL_BASIC_MODE_DESIRED_VALUES_FRAME_ID (0x202u)
#define SENSO__WHEEL_DIGITAL_OUTPUT_VALUES_FRAME_ID (0x20au)
#define SENSO__WHEEL_ABSOLUTE_POSITION_FRAME_ID (0x20bu)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_REQUEST_FRAME_ID (0x22du)
#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_FRAME_ID (0x20du)
#define SENSO__WHEEL_VERSION_REQUEST_FRAME_ID (0x20eu)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_FRAME_ID (0x22au)
#define SENSO__WHEEL_USER_PARAMETERS_REQUEST_FRAME_ID (0x221u)
#define SENSO__WHEEL_CONTROL_MODULE_STATUS_FRAME_ID (0x210u)
#define SENSO__WHEEL_NORMAL_MODE_ACTUAL_VALUES_FRAME_ID (0x211u)
#define SENSO__WHEEL_BASIC_MODE_ACTUAL_VALUES_FRAME_ID (0x212u)
#define SENSO__WHEEL_DIGITAL_ANALOG_INPUT_VALUES_FRAME_ID (0x21au)
#define SENSO__WHEEL_ABSOLUTE_POSITION_RESPONSE_FRAME_ID (0x21bu)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_FRAME_ID (0x23du)
#define SENSO__WHEEL_READ_ONLY_VALUES_FRAME_ID (0x21du)
#define SENSO__WHEEL_VERSION_FRAME_ID (0x21eu)
#define SENSO__WHEEL_EFFECT_PARAMETERS_FRAME_ID (0x23au)
#define SENSO__WHEEL_USER_PARAMETERS_FRAME_ID (0x231u)

/* Frame lengths in bytes. */
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_LENGTH (8u)
#define SENSO__WHEEL_NORMAL_MODE_DESIRED_VALUES_LENGTH (8u)
#define SENSO__WHEEL_BASIC_MODE_DESIRED_VALUES_LENGTH (2u)
#define SENSO__WHEEL_DIGITAL_OUTPUT_VALUES_LENGTH (2u)
#define SENSO__WHEEL_ABSOLUTE_POSITION_LENGTH (2u)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_REQUEST_LENGTH (1u)
#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_LENGTH (1u)
#define SENSO__WHEEL_VERSION_REQUEST_LENGTH (1u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_LENGTH (8u)
#define SENSO__WHEEL_USER_PARAMETERS_REQUEST_LENGTH (1u)
#define SENSO__WHEEL_CONTROL_MODULE_STATUS_LENGTH (8u)
#define SENSO__WHEEL_NORMAL_MODE_ACTUAL_VALUES_LENGTH (8u)
#define SENSO__WHEEL_BASIC_MODE_ACTUAL_VALUES_LENGTH (4u)
#define SENSO__WHEEL_DIGITAL_ANALOG_INPUT_VALUES_LENGTH (6u)
#define SENSO__WHEEL_ABSOLUTE_POSITION_RESPONSE_LENGTH (2u)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_LENGTH (8u)
#define SENSO__WHEEL_READ_ONLY_VALUES_LENGTH (8u)
#define SENSO__WHEEL_VERSION_LENGTH (8u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_LENGTH (8u)
#define SENSO__WHEEL_USER_PARAMETERS_LENGTH (8u)

/* Extended or standard frame types. */
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_IS_EXTENDED (0)
#define SENSO__WHEEL_NORMAL_MODE_DESIRED_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_BASIC_MODE_DESIRED_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_DIGITAL_OUTPUT_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_ABSOLUTE_POSITION_IS_EXTENDED (0)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_REQUEST_IS_EXTENDED (0)
#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_IS_EXTENDED (0)
#define SENSO__WHEEL_VERSION_REQUEST_IS_EXTENDED (0)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_IS_EXTENDED (0)
#define SENSO__WHEEL_USER_PARAMETERS_REQUEST_IS_EXTENDED (0)
#define SENSO__WHEEL_CONTROL_MODULE_STATUS_IS_EXTENDED (0)
#define SENSO__WHEEL_NORMAL_MODE_ACTUAL_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_BASIC_MODE_ACTUAL_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_DIGITAL_ANALOG_INPUT_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_ABSOLUTE_POSITION_RESPONSE_IS_EXTENDED (0)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_IS_EXTENDED (0)
#define SENSO__WHEEL_READ_ONLY_VALUES_IS_EXTENDED (0)
#define SENSO__WHEEL_VERSION_IS_EXTENDED (0)
#define SENSO__WHEEL_EFFECT_PARAMETERS_IS_EXTENDED (0)
#define SENSO__WHEEL_USER_PARAMETERS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_CYCLE_TIME_MS (10u)
#define SENSO__WHEEL_NORMAL_MODE_DESIRED_VALUES_CYCLE_TIME_MS (1u)
#define SENSO__WHEEL_BASIC_MODE_DESIRED_VALUES_CYCLE_TIME_MS (1u)

/* Signal choices. */
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_CONTROL_WORD_SWITCH_OFF_CHOICE (0u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_CONTROL_WORD_SWITCH_READY_CHOICE (2u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_CONTROL_WORD_SWITCH_ON_CHOICE (4u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_CONTROL_WORD_QUIT_ERROR_CHOICE (15u)

#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_MODE_OF_OPERATION_NORMAL__MODE_CHOICE (1u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_MODE_OF_OPERATION_BASIC__MODE_CHOICE (2u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_MODE_OF_OPERATION_REFERENCING__MODE_CHOICE (4u)
#define SENSO__WHEEL_CONTROL_MODULE_CONTROL_MODE_OF_OPERATION_DEMONSTRATION__MODE_CHOICE (8u)

#define SENSO__WHEEL_SYSTEM_PARAMETERS_REQUEST_SYSTEM_PARAMETERS_REQUEST_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_REQUEST_SYSTEM_PARAMETERS_REQUEST_MUX_DATA_SET2_CHOICE (2u)

#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_READ_ONLY_VALUES_REQUEST_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_READ_ONLY_VALUES_REQUEST_MUX_DATA_SET2_CHOICE (2u)
#define SENSO__WHEEL_READ_ONLY_VALUES_REQUEST_READ_ONLY_VALUES_REQUEST_MUX_DATA_SET3_CHOICE (3u)

#define SENSO__WHEEL_VERSION_REQUEST_VERSION_REQUEST_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_VERSION_REQUEST_VERSION_REQUEST_MUX_DATA_SET2_CHOICE (2u)

#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET2_CHOICE (2u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET3_CHOICE (3u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET4_CHOICE (4u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET5_CHOICE (5u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET6_CHOICE (6u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_WRITE_EFFECT_PARAMETERS_WRITE_MUX_DATA_SET7_CHOICE (7u)

#define SENSO__WHEEL_USER_PARAMETERS_REQUEST_USER_PARAMETERS_REQUEST_MUX_PARAMETER1_CHOICE (1u)

#define SENSO__WHEEL_SYSTEM_PARAMETERS_SYSTEM_PARAMETERS_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_SYSTEM_PARAMETERS_SYSTEM_PARAMETERS_MUX_DATA_SET2_CHOICE (2u)

#define SENSO__WHEEL_READ_ONLY_VALUES_READ_ONLY_VALUES_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_READ_ONLY_VALUES_READ_ONLY_VALUES_MUX_DATA_SET2_CHOICE (2u)
#define SENSO__WHEEL_READ_ONLY_VALUES_READ_ONLY_VALUES_MUX_DATA_SET3_CHOICE (3u)

#define SENSO__WHEEL_VERSION_VERSION_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_VERSION_VERSION_MUX_DATA_SET2_CHOICE (2u)

#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET1_CHOICE (1u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET2_CHOICE (2u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET3_CHOICE (3u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET4_CHOICE (4u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET5_CHOICE (5u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET6_CHOICE (6u)
#define SENSO__WHEEL_EFFECT_PARAMETERS_EFFECT_PARAMETERS_MUX_DATA_SET7_CHOICE (7u)

#define SENSO__WHEEL_USER_PARAMETERS_USER_PARAMETERS_MUX_PARAMETER1_CHOICE (1u)

#define SENSO__WHEEL_USER_PARAMETERS_CAN_BAUD_RATE_250_CHOICE (250u)
#define SENSO__WHEEL_USER_PARAMETERS_CAN_BAUD_RATE_500_CHOICE (500u)
#define SENSO__WHEEL_USER_PARAMETERS_CAN_BAUD_RATE_1000_CHOICE (1000u)

/**
 * Signals in message ControlModuleControl.
 *
 * Control Module 
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_control_module_control_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_word;

    /**
     * Range: 1..8 (1..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t mode_of_operation;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auxiliary_functions;

    /**
     * Range: 0..1440 (0..1440 °)
     * Scale: 1
     * Offset: 0
     */
    uint16_t end_stop_position;

    /**
     * Range: -359..359 (-359..359 °)
     * Scale: 1
     * Offset: 0
     */
    int16_t position_offset;

    /**
     * Range: 0..255 (0..255 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t torque_limitation;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t peak_torque_limitation;
};

/**
 * Signals in message NormalModeDesiredValues.
 *
 * Normal Mode supporting full SENSO-Wheel features: Desired Values
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_normal_mode_desired_values_t {
    /**
     * Range: -32768..32767 (-32.768..32.767 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t desired_torque;

    /**
     * Range: 0..5000 (0..5000 mNm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t friction;

    /**
     * Range: 0..500 (0..500 mNm/rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t damping;

    /**
     * Range: 0..2500 (0..2500 mNm/°)
     * Scale: 1
     * Offset: 0
     */
    uint16_t spring_stiffness;
};

/**
 * Signals in message BasicModeDesiredValues.
 *
 * Basic Mode for fast communication: Desired Torque
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_basic_mode_desired_values_t {
    /**
     * Range: -32768..32767 (-32.768..32.767 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t desired_torque;
};

/**
 * Signals in message DigitalOutputValues.
 *
 * Digital output values (not SENSO-Wheel HT)
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_digital_output_values_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t digital_output;
};

/**
 * Signals in message AbsolutePosition.
 *
 * Desired Absolute Position
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_absolute_position_t {
    /**
     * Range: -14400..14400 (-1440..1440 °)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t absolute_position;
};

/**
 * Signals in message SystemParametersRequest.
 *
 * Request for System Parameters
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_system_parameters_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_parameters_request_mux;
};

/**
 * Signals in message ReadOnlyValuesRequest.
 *
 * Request for Read-Only Values
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_read_only_values_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t read_only_values_request_mux;
};

/**
 * Signals in message VersionRequest.
 *
 * Request for Version and Product Information
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_version_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t version_request_mux;
};

/**
 * Signals in message EffectParametersWrite.
 *
 * Write desired Effect ParametersRequest for Effect Parameters
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_effect_parameters_write_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t effect_parameters_write_mux;

    /**
     * Range: 0..255 (0..255 mNm/°)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_end_stop_stiffness;

    /**
     * Range: 0..255 (0..255 mNm/rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_referencing_damping;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_friction_gain;

    /**
     * Range: 0..255 (0..255 °)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_end_stop_vibration_dist;

    /**
     * Range: 0..255 (0..255 mNm/°)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_friction2_damping;

    /**
     * Range: 0..255 (0..25.5 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t eff_para_des_damping_half_damping_vel;

    /**
     * Range: 0..1 (0..0.1 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t torque_scaling;

    /**
     * Range: 0..65535 (0..65535 mNm/rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_end_stop_damping;

    /**
     * Range: 0..65535 (0..65535 mNm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_friction_edge;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_end_stop_vibration_period;

    /**
     * Range: 0..65535 (0..655.35 %)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t eff_para_des_friction2_factor;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_damping_vel_filter_const;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_des_end_stop_vibration_gap;
};

/**
 * Signals in message UserParametersRequest.
 *
 * Request for User Parameters (firmware version 3.06 and newer)Write desired User Parameters (firmware version 3.06 and newer)
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_user_parameters_request_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t user_parameters_request_mux;
};

/**
 * Signals in message ControlModuleStatus.
 *
 * Control Module
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_control_module_status_t {
    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t status;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t error;

    /**
     * Range: 0..1440 (0..1440 °)
     * Scale: 1
     * Offset: 0
     */
    uint16_t end_stop_position;

    /**
     * Range: -359..359 (-359..359 °)
     * Scale: 1
     * Offset: 0
     */
    int16_t encoder_index_position;
};

/**
 * Signals in message NormalModeActualValues.
 *
 * Normal Mode supporting full SENSO-Wheel features: Actual Values
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_normal_mode_actual_values_t {
    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 inc)
     * Scale: 1
     * Offset: 0
     */
    int32_t nm_actual_position;

    /**
     * Range: -32768..32767 (-32768..32767 rpm)
     * Scale: 1
     * Offset: 0
     */
    int16_t nm_actual_velocity;

    /**
     * Range: -32768..32767 (-32.768..32.767 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    int16_t nm_actual_torque;
};

/**
 * Signals in message BasicModeActualValues.
 *
 * Basic Mode for fast communication: Actual Position
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_basic_mode_actual_values_t {
    /**
     * Range: -2147483648..2147483647 (-2147483648..2147483647 inc)
     * Scale: 1
     * Offset: 0
     */
    int32_t bm_actual_position;
};

/**
 * Signals in message DigitalAnalogInputValues.
 *
 * Digital and Analog Input Values (not SENSO-Wheel HT)
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_digital_analog_input_values_t {
    /**
     * Range: 0..63 (0..63 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t digital_input;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog_input1;

    /**
     * Range: 0..1023 (0..1023 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t analog_input2;
};

/**
 * Signals in message AbsolutePositionResponse.
 *
 * Response to Desired Absolute Position
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_absolute_position_response_t {
    /**
     * Range: -14400..14400 (-1440..1440 °)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t absolute_position;
};

/**
 * Signals in message SystemParameters.
 *
 * System Parameters
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_system_parameters_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_parameters_mux;

    /**
     * Range: 0..4294967295 (0..4294967295 inc)
     * Scale: 1
     * Offset: 0
     */
    uint32_t position_increments_per_revolution;

    /**
     * Range: 0..65535 (0..65.535 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t nominal_torque;

    /**
     * Range: 0..65535 (0..65.535 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t maximum_torque;
};

/**
 * Signals in message ReadOnlyValues.
 *
 * Read-Only Values
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_read_only_values_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t read_only_values_mux;

    /**
     * Range: 0..65535 (0..65535 °C)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_power_stage;

    /**
     * Range: 0..65535 (0..65.535 Nm)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t average_absolute_motor_torque;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t error;

    /**
     * Range: 0..65535 (0..65535 °C)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_microprocessor;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hardware_specific_error;

    /**
     * Range: 0..65535 (0..65535 °C)
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_break_chopper;
};

/**
 * Signals in message Version.
 *
 * Version and Product Information
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_version_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t version_mux;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_basic_version_minor;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t product_code;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t software_basic_version_major;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t project_code;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t hardware_option;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t project_version_minor;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t project_version_major;
};

/**
 * Signals in message EffectParameters.
 *
 * Effect Parameters
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_effect_parameters_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t effect_parameters_mux;

    /**
     * Range: 0..65535 (0..65535 mNm/°)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_end_stop_stiffness;

    /**
     * Range: 0..65535 (0..65535 mNm/rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_referencing_damping;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_friction_gain;

    /**
     * Range: 0..65535 (0..65535 °)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_end_stop_vibration_dist;

    /**
     * Range: 0..65535 (0..65535 mNm/°)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_friction2_damping;

    /**
     * Range: 0..65535 (0..6553.5 rpm)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t eff_para_damping_half_damping_vel;

    /**
     * Range: 100..1000 (10..100 -)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t torque_scaling;

    /**
     * Range: 0..65535 (0..65535 mNm/rpm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_end_stop_damping;

    /**
     * Range: 0..65535 (0..65535 mNm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_friction_edge;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_end_stop_vibration_period;

    /**
     * Range: 0..65535 (0..655.35 %)
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t eff_para_friction2_factor;

    /**
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_damping_vel_filter_const;

    /**
     * Range: 0..65535 (0..65535 ms)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eff_para_end_stop_vibration_gap;
};

/**
 * Signals in message UserParameters.
 *
 * User Parameters (firmware version 3.06 and newer)
 *
 * All signal values are as on the CAN bus.
 */
struct senso__wheel_user_parameters_t {
    /**
     * CAN baud rate
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t user_parameters_mux;

    /**
     * Range: 0..4294967295 (0..4294967295 kBaud)
     * Scale: 1
     * Offset: 0
     */
    uint32_t can_baud_rate;
};

/**
 * Pack message ControlModuleControl.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_control_module_control_pack(
    uint8_t *dst_p,
    const struct senso__wheel_control_module_control_t *src_p,
    size_t size);

/**
 * Unpack message ControlModuleControl.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_control_module_control_unpack(
    struct senso__wheel_control_module_control_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_control_module_control_control_word_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_control_word_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_control_word_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_control_module_control_mode_of_operation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_mode_of_operation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_mode_of_operation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_control_module_control_auxiliary_functions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_auxiliary_functions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_auxiliary_functions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_control_module_control_end_stop_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_end_stop_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_end_stop_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_control_module_control_position_offset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_position_offset_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_position_offset_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_control_module_control_torque_limitation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_torque_limitation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_torque_limitation_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_control_module_control_peak_torque_limitation_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_control_peak_torque_limitation_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_control_peak_torque_limitation_is_in_range(uint8_t value);

/**
 * Pack message NormalModeDesiredValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_normal_mode_desired_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_normal_mode_desired_values_t *src_p,
    size_t size);

/**
 * Unpack message NormalModeDesiredValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_normal_mode_desired_values_unpack(
    struct senso__wheel_normal_mode_desired_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_normal_mode_desired_values_desired_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_desired_values_desired_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_desired_values_desired_torque_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_normal_mode_desired_values_friction_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_desired_values_friction_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_desired_values_friction_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_normal_mode_desired_values_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_desired_values_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_desired_values_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_normal_mode_desired_values_spring_stiffness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_desired_values_spring_stiffness_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_desired_values_spring_stiffness_is_in_range(uint16_t value);

/**
 * Pack message BasicModeDesiredValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_basic_mode_desired_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_basic_mode_desired_values_t *src_p,
    size_t size);

/**
 * Unpack message BasicModeDesiredValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_basic_mode_desired_values_unpack(
    struct senso__wheel_basic_mode_desired_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_basic_mode_desired_values_desired_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_basic_mode_desired_values_desired_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_basic_mode_desired_values_desired_torque_is_in_range(int16_t value);

/**
 * Pack message DigitalOutputValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_digital_output_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_digital_output_values_t *src_p,
    size_t size);

/**
 * Unpack message DigitalOutputValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_digital_output_values_unpack(
    struct senso__wheel_digital_output_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_digital_output_values_digital_output_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_digital_output_values_digital_output_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_digital_output_values_digital_output_is_in_range(uint8_t value);

/**
 * Pack message AbsolutePosition.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_absolute_position_pack(
    uint8_t *dst_p,
    const struct senso__wheel_absolute_position_t *src_p,
    size_t size);

/**
 * Unpack message AbsolutePosition.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_absolute_position_unpack(
    struct senso__wheel_absolute_position_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_absolute_position_absolute_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_absolute_position_absolute_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_absolute_position_absolute_position_is_in_range(int16_t value);

/**
 * Pack message SystemParametersRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_system_parameters_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_system_parameters_request_t *src_p,
    size_t size);

/**
 * Unpack message SystemParametersRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_system_parameters_request_unpack(
    struct senso__wheel_system_parameters_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_system_parameters_request_system_parameters_request_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_system_parameters_request_system_parameters_request_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_system_parameters_request_system_parameters_request_mux_is_in_range(uint8_t value);

/**
 * Pack message ReadOnlyValuesRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_read_only_values_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_read_only_values_request_t *src_p,
    size_t size);

/**
 * Unpack message ReadOnlyValuesRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_read_only_values_request_unpack(
    struct senso__wheel_read_only_values_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_read_only_values_request_read_only_values_request_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_request_read_only_values_request_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_request_read_only_values_request_mux_is_in_range(uint8_t value);

/**
 * Pack message VersionRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_version_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_version_request_t *src_p,
    size_t size);

/**
 * Unpack message VersionRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_version_request_unpack(
    struct senso__wheel_version_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_request_version_request_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_request_version_request_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_request_version_request_mux_is_in_range(uint8_t value);

/**
 * Pack message EffectParametersWrite.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_effect_parameters_write_pack(
    uint8_t *dst_p,
    const struct senso__wheel_effect_parameters_write_t *src_p,
    size_t size);

/**
 * Unpack message EffectParametersWrite.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_effect_parameters_write_unpack(
    struct senso__wheel_effect_parameters_write_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_effect_parameters_write_effect_parameters_write_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_effect_parameters_write_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_effect_parameters_write_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_stiffness_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_referencing_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_friction_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_friction_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_dist_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_friction2_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_damping_half_damping_vel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_torque_scaling_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_torque_scaling_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_torque_scaling_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction_edge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_friction_edge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_friction_edge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_period_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_friction2_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_damping_vel_filter_const_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_write_eff_para_des_end_stop_vibration_gap_is_in_range(uint16_t value);

/**
 * Pack message UserParametersRequest.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_user_parameters_request_pack(
    uint8_t *dst_p,
    const struct senso__wheel_user_parameters_request_t *src_p,
    size_t size);

/**
 * Unpack message UserParametersRequest.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_user_parameters_request_unpack(
    struct senso__wheel_user_parameters_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_user_parameters_request_user_parameters_request_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_user_parameters_request_user_parameters_request_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_user_parameters_request_user_parameters_request_mux_is_in_range(uint8_t value);

/**
 * Pack message ControlModuleStatus.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_control_module_status_pack(
    uint8_t *dst_p,
    const struct senso__wheel_control_module_status_t *src_p,
    size_t size);

/**
 * Unpack message ControlModuleStatus.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_control_module_status_unpack(
    struct senso__wheel_control_module_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_control_module_status_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_status_status_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_status_status_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_control_module_status_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_status_error_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_status_error_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_control_module_status_end_stop_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_status_end_stop_position_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_status_end_stop_position_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_control_module_status_encoder_index_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_control_module_status_encoder_index_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_control_module_status_encoder_index_position_is_in_range(int16_t value);

/**
 * Pack message NormalModeActualValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_normal_mode_actual_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_normal_mode_actual_values_t *src_p,
    size_t size);

/**
 * Unpack message NormalModeActualValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_normal_mode_actual_values_unpack(
    struct senso__wheel_normal_mode_actual_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t senso__wheel_normal_mode_actual_values_nm_actual_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_actual_values_nm_actual_position_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_actual_values_nm_actual_position_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_normal_mode_actual_values_nm_actual_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_actual_values_nm_actual_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_actual_values_nm_actual_velocity_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_normal_mode_actual_values_nm_actual_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_normal_mode_actual_values_nm_actual_torque_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_normal_mode_actual_values_nm_actual_torque_is_in_range(int16_t value);

/**
 * Pack message BasicModeActualValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_basic_mode_actual_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_basic_mode_actual_values_t *src_p,
    size_t size);

/**
 * Unpack message BasicModeActualValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_basic_mode_actual_values_unpack(
    struct senso__wheel_basic_mode_actual_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t senso__wheel_basic_mode_actual_values_bm_actual_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_basic_mode_actual_values_bm_actual_position_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_basic_mode_actual_values_bm_actual_position_is_in_range(int32_t value);

/**
 * Pack message DigitalAnalogInputValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_digital_analog_input_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_digital_analog_input_values_t *src_p,
    size_t size);

/**
 * Unpack message DigitalAnalogInputValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_digital_analog_input_values_unpack(
    struct senso__wheel_digital_analog_input_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_digital_analog_input_values_digital_input_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_digital_analog_input_values_digital_input_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_digital_analog_input_values_digital_input_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_digital_analog_input_values_analog_input1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_digital_analog_input_values_analog_input1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_digital_analog_input_values_analog_input1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_digital_analog_input_values_analog_input2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_digital_analog_input_values_analog_input2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_digital_analog_input_values_analog_input2_is_in_range(uint16_t value);

/**
 * Pack message AbsolutePositionResponse.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_absolute_position_response_pack(
    uint8_t *dst_p,
    const struct senso__wheel_absolute_position_response_t *src_p,
    size_t size);

/**
 * Unpack message AbsolutePositionResponse.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_absolute_position_response_unpack(
    struct senso__wheel_absolute_position_response_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t senso__wheel_absolute_position_response_absolute_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_absolute_position_response_absolute_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_absolute_position_response_absolute_position_is_in_range(int16_t value);

/**
 * Pack message SystemParameters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_system_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_system_parameters_t *src_p,
    size_t size);

/**
 * Unpack message SystemParameters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_system_parameters_unpack(
    struct senso__wheel_system_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_system_parameters_system_parameters_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_system_parameters_system_parameters_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_system_parameters_system_parameters_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t senso__wheel_system_parameters_position_increments_per_revolution_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_system_parameters_position_increments_per_revolution_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_system_parameters_position_increments_per_revolution_is_in_range(uint32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_system_parameters_nominal_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_system_parameters_nominal_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_system_parameters_nominal_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_system_parameters_maximum_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_system_parameters_maximum_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_system_parameters_maximum_torque_is_in_range(uint16_t value);

/**
 * Pack message ReadOnlyValues.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_read_only_values_pack(
    uint8_t *dst_p,
    const struct senso__wheel_read_only_values_t *src_p,
    size_t size);

/**
 * Unpack message ReadOnlyValues.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_read_only_values_unpack(
    struct senso__wheel_read_only_values_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_read_only_values_read_only_values_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_read_only_values_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_read_only_values_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_temperature_power_stage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_temperature_power_stage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_temperature_power_stage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_average_absolute_motor_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_average_absolute_motor_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_average_absolute_motor_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_error_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_error_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_temperature_microprocessor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_temperature_microprocessor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_temperature_microprocessor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_hardware_specific_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_hardware_specific_error_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_hardware_specific_error_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_read_only_values_temperature_break_chopper_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_read_only_values_temperature_break_chopper_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_read_only_values_temperature_break_chopper_is_in_range(uint16_t value);

/**
 * Pack message Version.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_version_pack(
    uint8_t *dst_p,
    const struct senso__wheel_version_t *src_p,
    size_t size);

/**
 * Unpack message Version.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_version_unpack(
    struct senso__wheel_version_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_version_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_version_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_version_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_software_basic_version_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_software_basic_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_software_basic_version_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_version_product_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_product_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_product_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_software_basic_version_major_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_software_basic_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_software_basic_version_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_version_project_code_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_project_code_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_project_code_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_version_hardware_option_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_hardware_option_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_hardware_option_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_project_version_minor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_project_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_project_version_minor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_version_project_version_major_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_version_project_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_version_project_version_major_is_in_range(uint8_t value);

/**
 * Pack message EffectParameters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_effect_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_effect_parameters_t *src_p,
    size_t size);

/**
 * Unpack message EffectParameters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_effect_parameters_unpack(
    struct senso__wheel_effect_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_effect_parameters_effect_parameters_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_effect_parameters_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_effect_parameters_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_end_stop_stiffness_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_end_stop_stiffness_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_end_stop_stiffness_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_referencing_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_referencing_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_referencing_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_friction_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_friction_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_friction_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_dist_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_friction2_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_friction2_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_friction2_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_damping_half_damping_vel_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_torque_scaling_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_torque_scaling_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_torque_scaling_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_end_stop_damping_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_end_stop_damping_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_end_stop_damping_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_friction_edge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_friction_edge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_friction_edge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_period_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_friction2_factor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_friction2_factor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_friction2_factor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_damping_vel_filter_const_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_effect_parameters_eff_para_end_stop_vibration_gap_is_in_range(uint16_t value);

/**
 * Pack message UserParameters.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int senso__wheel_user_parameters_pack(
    uint8_t *dst_p,
    const struct senso__wheel_user_parameters_t *src_p,
    size_t size);

/**
 * Unpack message UserParameters.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int senso__wheel_user_parameters_unpack(
    struct senso__wheel_user_parameters_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t senso__wheel_user_parameters_user_parameters_mux_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_user_parameters_user_parameters_mux_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_user_parameters_user_parameters_mux_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t senso__wheel_user_parameters_can_baud_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double senso__wheel_user_parameters_can_baud_rate_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool senso__wheel_user_parameters_can_baud_rate_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
